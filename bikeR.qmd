---
title: "bikeR"
editor_options: 
  chunk_output_type: console
---

## ASK

**Guiding questions:**

*What is the problem you are trying to solve?*

**A:** To find out the key difference between annual members from casual users.

*How can your insights drive business decisions?*

**A:** It will help to find the key differentiations in order to get insights on how to mutate the casuals into annuals. Maybe it will be a simple matter. 

**Key tasks**

*1. Identify the business task*

**A:** To figure out insights on how to convey casual users into annual members.

*2. Consider key stakeholders*

**A:** Moreno and Cyclistc Executive Team.

**Deliverable**

-   A clear statement of the business task

**A:** ***Diferentiate casual from member riders.***

## PREPARE

**Guiding questions**

*Where is your data located?*

**A:** https://divvy-tripdata.s3.amazonaws.com/index.html The data has been made available by Motivate International Inc.

*How is the data organized?*

**A:** Within the above link, there are a lot of zip files. I notice some data was as a ride table monthly divided with names like: "YYYYMM-divvy-tripdata.zip" in which the table have an id from each ride, but few or none information on the users except their type. Continuing there are this another kind of name: "Divvy_Stations_Trips_YYYY_QXQZ.zip", for the semester (two quarters), other with only quarters from 2018 to 2020 and finnaly the "Divvy_Stations_Trips_2013.zip" containing two tables: trips in 2013 and stations. Within this last file, there is a RESUME.txt file containing the following tables descriptions:

The tables:

\*\*Metadata for Trips Table:

Variables:

-   trip_id: ID attached to each trip taken
-   starttime: day and time trip started, in CST
-   stoptime: day and time trip ended, in CST
-   bikeid: ID attached to each bike
-   tripduration: time of trip in seconds
-   from_station_name: name of station where trip originated
-   to_station_name: name of station where trip terminated
-   from_station_id: ID of station where trip originated
-   to_station_id: ID of station where trip terminated usertype: "Customer" is a rider who purchased a 24-Hour Pass; "Subscriber" is a rider who purchased an Annual Membership
-   gender: gender of rider
-   birthyear: birth year of rider

Notes:

-   First row contains column names
-   Total records = 905,699
-   Trips that did not include a start or end date were removed from original table.
-   Gender and birthday are only available for Subscribers

Metadata for Stations table:

Variables:

-   name: station name\
-   latitude: station latitude
-   longitude: station longitude
-   dpcapacity: number of total docks at each station as of 8/20/2014 online
-   date: date the station went live in the system

I decided to import the most recent station table in the file "Divvy_Stations_2017_Q3Q4.csv" and the trips from 2015 to 2017 to keep in pace with the stations data.

To do so, I create a folder named "import" to gather all the files to be imported.

Are there issues with bias or credibility in this data? Does your data ROCCC? **A:** Yes, there are credibility and the ROCCC parameters are in compliance.

-   Reliable: The data source is not biased because is collected from the devices.

-   Original: The data was generated from a known source to this course.

-   Comprehensive: The data contains all elements to get to the solution.

-   Current: For the present purpose, the data is quite current.

-   Cited: The data is public under a public licence.

*How are you addressing licensing, privacy, security, and accessibility?*\
**A:** No problem since, the data has only birthday information on the subjects. Overall it is a public database.

\
*How did you verify the data's integrity?*\
**A:** Just understanding it is collected from the devices and the integrity is preserved though cause there is no biased filtering for instance.

*How does it help you answer your question?*\
**A:** Specially the trip table, will help to understand the patterns on the rider?

*Are there any problems with the data?*

**A:** Not so far until now.

## PROCESS

*What tools are you choosing and why?*

**A:** I will use R with RStudio because there are a lot of data and the files from 2015 to 2017 results in a huge data base to be treated in worksheets.

*Have you ensured your data’s integrity?*

**A:** I notice there is now data able to identify users and the information collectors only exclude those not using the bikes. So, no bias at all.

*What steps have you taken to ensure that your data is clean and ready to analyse?*

**A:** The cleaning process described bellow.

*Have you documented your cleaning process so you can review and share those results?*

**A:** Yes.

### Documentation on Cleaning Data

#### R Libraries to be used

```{r Bibliotecas, message=FALSE, warning=FALSE}
library(pacman)

pacman::p_load("tidyverse", "openxlsx", "flextable", "janitor", "patchwork", "readxl", "infer", "camcorder")


```

#### Importing Data

Now, lets import the trip tables (from the import folder):

```{r trip_table_load, message=FALSE}
#Indicates the local machine path
path_trip <- "/Users/leandroalves/Library/CloudStorage/OneDrive-Personal/Documents/BINARIO/Pessoal/Leandro/1. stuff/Google Analytics/Course 08 - Capstone/bike/import"
#Reads all pattern like files at the path
arquivos_trip <- dir(path_trip, pattern = "^Divvy_Trips.*csv$") 
#Uses purrr function to read_csv all files within the directory and convert it to tibble
trip_raw <- map_df(arquivos_trip, ~ read_csv(str_c(path_trip, "/", .x)) %>% mutate_all(as.character) %>% clean_names) %>% as_tibble()

#Glimpses the tibble.
glimpse(trip_raw)
```

There is four variables candidates for date type: starttime, stoptime, start_time and end_time. First it is important to investigate the date formats available in the files to reduce inconsistency.

```{r trip_raw}
trip_raw %>% 
  mutate(digst = str_length(starttime)) %>% 
  group_by(digst) %>% 
  arrange(digst) %>% 
  slice(1) %>% 
  select(digst, starttime)
```

Here it can be seen it has the data format as month, day and year, but the hourly format sometimes has seconds and others do not. In this case, each date column will be separated so it can rightly be converted later to adjust the feature data type. To begin with, it was separated the days from the hourly parts, processed each individually and finally got back together with the `make_datetime()` function from `lubridate` package.

Also, it is important to notice it is not the whole database which contains `r formatC(nrow(trip_raw), digits = 0, format = 'f', big.mark = '.', decimal.mark = ',')` observations and this can demand extra processing time without necessity. So I decide to use the `dplyr` R package `slice_sample()` function to adequately crop the table in 10% of its total.

As a further step, all the left over character variables will be converted to factor for analyses phase next.

```{r trip, message=FALSE, warning=FALSE}
(
trip <-
    trip_raw %>% 
    slice_sample(prop = 0.1) %>% 
    separate(starttime, sep = " ", into = c("starttime_day", "starttime_t")) %>% 
    separate(stoptime, sep = " ", into = c("stoptime_day", "stoptime_t")) %>% 
    separate(start_time, sep = " ", into = c("start_time_day", "start_time_t")) %>% 
    separate(end_time, sep = " ", into = c("end_time_day", "end_time_t")) %>% 
    mutate(day_started_at = if_else(!is.na(starttime_day), starttime_day, start_time_day),
           day_ended_at = if_else(!is.na(stoptime_day), stoptime_day, end_time_day),
           time_started_at = if_else(!is.na(starttime_t), starttime_t, start_time_t),
           time_ended_at = if_else(!is.na(stoptime_t), stoptime_t, end_time_t)) %>% 
    select(-ends_with("_t"), -ends_with("_day")) %>% 
    mutate(across(c(tripduration, birthyear), as.numeric)) %>% 
    mutate(across(starts_with("time"), ~ if_else(str_length(.x) <= 5, hm(.x), hms(.x)))) %>% 
  mutate(across(starts_with("day"), mdy)) %>% 
  mutate(across(where(is.character), as.factor)) %>% 
  mutate(
    started_at = make_datetime(
      year(day_started_at),
      month(day_started_at),
      day(day_started_at),
      hour(time_started_at),
      minute(time_started_at),
      second(time_started_at)
    ),
    ended_at = make_datetime(
      year(day_ended_at),
      month(day_ended_at),
      day(day_ended_at),
      hour(time_ended_at),
      minute(time_ended_at),
      second(time_ended_at)
    )
  ) %>% 
  select(-starts_with("day"), -starts_with("time"))

)
```

Now using the `skim()` function from `skimr` package to really understand the data and see what is missing.

```{r skim_trip}
skimr::skim(trip)
```

#### Transforming the Data

Checking for consistency in `tripduration` feature because it showed some ultrahigh values as `r max(trip$tripduration)/60/06` hours and it seemed like an error or an outlier. To do so, lets ad a new calculated feature `ride_length` and see if both are align.

```{r}
trip_with_ridelength <- 
trip %>% 
  mutate(ride_length = as.numeric(difftime(ended_at, started_at, units = "secs")),
         difference = tripduration-ride_length) %>% 
  select(tripduration, ride_length, difference, everything()) # organizing fields to investigate the difference
```

The calculated diference `ride_length` showed some negative values to be investigated and also showed the highvalues were correct. Let's dig in a little further in the negative values.

```{r}
trip_with_ridelength %>% 
  filter(ride_length <= 0) %>% 
  left_join(trip_raw %>% select(trip_id, starttime, stoptime, start_time, end_time), by = "trip_id") %>% 
  select(tripduration, ride_length, difference, started_at, ended_at, starttime, stoptime, start_time, end_time) 
```

By this last, it can be seen there are inconsistencies, but for very few registers. Maybe because the actual device clocks where not synchronized. In any case, for the final transformation these values will be filtered out.

Creating column `day_of_week`, `yr` for year and `mth` for month in trip table. Also, it will be added a column with the age of the member subtracting the birthyear from `yr`.

Another step is to convert the user type designations to "members" and "casual" as the maketing team named them. But, first, let's see how many different usertypes and how many registers from each to be treated.

```{r}
trip %>% 
  count(usertype)
```

From here, it showed three types, and the "Dependent" was not mentioned even in the description files. Let's see if they have the members atributes as `birthyear` and `gender`.

```{r}
trip %>% 
  filter(usertype == "Dependent") %>% 
  select(usertype, birthyear, gender, everything()) %>% 
  filter(is.na(birthyear) | is.na(gender))
```

As it can be seen, only few or none registers have no gender, maybe some typos, but for consistency this record will be dropped (by filter). For the rest, the "Dependent" user is a "member".

```{r}
(
  trip_transformed <- 
    trip_with_ridelength %>% 
    filter(ride_length > 0) %>% # removing inconsistent ride_length 
    select(-difference) %>% # removing the difference auxiliar field
    mutate(day_of_week = wday(started_at, week_start = 7, label = FALSE),
           yr = year(started_at),
           mth = month(started_at),
           age = yr - birthyear,
           usertype = if_else(usertype == "Customer", "casual", "member")) %>%
    filter(!(usertype == "member" & (is.na(birthyear) | is.na(gender)))) %>% 
    select(ends_with("at"), day_of_week, everything())
)
```

#### Summary

All the transformation and cleaning process is documented above. Nonetheless it was used 10% sample to do the exercise regarding it would not matter for the final results.

## ANALYSE

Let's now perform an exploratory data analyses in order to answer the main question of the difference between members and casual users.

```{r}
skimr::skim(trip_transformed)
```

First, from the `skim()` function above, it can be notice that birthday and gender are only 75.3% completed, and it is probably due to the information from the README.txt file:

*Gender and birthday are only available for Subscribers*

The number of lines indicated is wrong though, it is probably because the README.txt is generic and covers only for one subfolder from the analyses and I decided to look over a bigger period: 3 years. In the present case, it will be selected a 10% sampled data from the full 10 millions rows in the original imported trip data under the table name of `trip_raw` in this work.

The `skim()` function provides all the descriptive analysis for all variables including a little histogram for numeric variable as well.

Examples of information extracted: The mean of the `ride_length` is `r mean(trip_transformed$ride_length)` .\
The max of `ride_length` is `r max(trip_transformed$ride_length)`.\
The mode for the `day_of_week` is `r median(trip_transformed$day_of_week)`.

One last point is the age and birthday field. They do not seem ok because there is some very aged people. Maybe is the case for a filter dropping this outliers (it was maybe typos). Let's see a histogram for the first quartile (@birth-first-quartile-hist).

```{r}
#| label: fig-birth-first-quartile-hist
#| fig-cap: "Histogram for birthdays of the first quartile (birthday < 1975)"

trip_transformed %>% 
  arrange(desc(age)) %>% 
  select(age, birthyear, everything()) %>% filter(birthyear<1975) %>% 
  ggplot(aes(birthyear)) +
  geom_histogram()
```

Well in this case, it can be seen some birth year registers around 1900 and 1920, but they are only a few: `r trip_transformed %>% filter(birthyear < 1930) %>% count()` in `r formatC(nrow(trip_transformed), digits = 0, format = 'f', big.mark = '.', decimal.mark = ',')` registers. In this case, to better perform the analysis, this cases will be filtered.

```{r}
trip_for_analysis <- 
trip_transformed %>% 
  filter(!(usertype == "member" & birthyear < 1930))
```

It can be performed a lot of tests and as it is already known the proportion between casual and member users, let's jump testing user type and gender to see the proportion using a bar chart:

```{r gender_usertype}
#| label: fig-gender-usertype-bar
#| fig-cap: "Gender distribution for Members"

trip_for_analysis %>% 
  filter(usertype == "member") %>% 
  ggplot(aes(gender, fill = gender)) +
  geom_bar(show.legend = FALSE) +
  scale_fill_viridis_d(direction = -1) +
  theme_minimal()
```

In this @fig-gender-usertype-bar it was filtered only members because casual users do not have information on sex. By the other hand, although for the Subscriber (member category) it has more male than female, it do not give a good clue on differentiation.

Also, how it had been told about using the devices over a period of time, it is cool to see it over time and look for seasonality. As it was created a column with the week day, it yields a graph plotting of user type versus week day and versus year using a `facet_grid` to see its behaving.

```{r user_dow_year}
#| label: fig-usertype-dow-year-facet-grid
#| fig-cap: "User type vs day_of_week by year"


trip_for_analysis %>% 
ggplot(aes(day_of_week, fill = usertype)) +
  geom_bar(show.legend = FALSE) +
  facet_grid( yr ~ usertype) +
  theme_minimal()
```

Analyzing the bar formation shape at @fig-usertype-dow-year-facet-grid, it can be seen a big difference between the categories week day based and little difference in the pattern along the years. In this image one can notice the members use the bikes in busy days more often. In casual users the pattern is inverted.

In this case it can be stated that the members use in week busy days is consistently higher than on the weekends.

Also, it does not have a gender classification in casual users, maybe it could use the members as a proxy and understand if is there a difference between them regarding week days (now it is not testing years anymore, since it showed no interference in @fig-usertype-dow-year-facet-grid).

```{r}
#| label: fig-member-dow-gender-facet-wrap
#| fig-cap: "Gender vs day_of_week for Members"


trip_for_analysis %>% 
  filter(usertype == "member") %>% 
ggplot(aes(day_of_week, fill = gender)) +
  geom_bar(show.legend = FALSE) +
  facet_wrap( ~ gender) +
  theme_minimal()
```

By the @fig-member-dow-gender-facet-wrap plot it can be seen although the graphs shape are similar for women using more bikes during the busy days it is almost flat in comparison with men's use.

Maybe with a boxplot, the evidence could be highlighted.

```{r}
#| label: fig-member-dow-gender-box
#| fig-cap: "Gender vs day_of_week for Members"


trip_for_analysis %>% 
  filter(usertype == "member") %>% 
ggplot(aes(gender, day_of_week, fill = gender)) +
  # geom_jitter(size = 2, alpha = .6) +
  geom_boxplot(show.legend = FALSE, alpha = .3) +
  theme_minimal()  
```

The female gender is a little weekly spreader than the male one.

Some study on age to see its relationship with gender.

```{r}
#| label: fig-member-age-gender-box
#| fig-cap: "Age vs gender for Members"


trip_for_analysis %>% 
  filter(usertype == "member") %>% 
ggplot(aes(gender, age, fill = gender)) +
  # geom_jitter(size = 2, alpha = .6) +
  geom_boxplot(show.legend = FALSE, alpha = .3) +
  theme_minimal()
```

And also for week days by age.

```{r}
#| label: fig-member-age-dow-box
#| fig-cap: "Age vs day_of_week for Members"


trip_for_analysis %>% 
  filter(usertype == "member") %>% 
  mutate(day_of_week = as.factor(day_of_week)) %>% 
  # ggstatsplot::ggbetweenstats(day_of_week, age)
  ggplot(aes(day_of_week, age)) +
  # geom_jitter(size = 2, alpha = .6) +
  geom_boxplot(show.legend = FALSE, alpha = .3, fill = "navy", color = "navy") +
  theme_minimal()
```

Another analyse should be about the month seasonality differences.

```{r usertype-dow-month-tile}
#| label: fig-usertype-dow-month-tile
#| fig-cap: "User type vs day_of_week by month"


trip_for_analysis %>% 
  count(day_of_week, usertype, mth) %>% 
  mutate(across(c(day_of_week, mth), as.factor)) %>% 
ggplot(aes(day_of_week, mth, fill = n)) +
  geom_tile() +
  facet_wrap( ~ usertype) +
  coord_equal() +
  theme_minimal()
```

For the variable `ride_length`, it can be notice in the descriptive summary (skim) it is distorted because you have some trips during all day long (\~ 23h). This could be a reading error from the devices for instance. Let's see its histograms to look for any distinction in the last quartile (\]75,100\]) and for the sake of better visualization it will be in logarithm scale and also in minutes (x60) as integer.

```{r}
#| label: fig-usertype-ride-hist-facet-q4
#| fig-cap: "Histogram ride_length by User Type - Fourth Quartile (]75,100])"

trip_for_analysis %>% 
  filter(ride_length > 1182) %>% 
  mutate(ride_length = as.integer(ride_length/60)) %>% 
ggplot(aes(ride_length, fill = usertype)) +
  geom_histogram(color = "ghostwhite", show.legend = FALSE) +
  labs(
    y = "",
    x = "ride_length(min)"
  ) +
  scale_x_log10() +
  facet_wrap( ~ usertype, scales = "free_y") +
  theme_minimal()
```

Now let's plot the same for the other quartiles.

```{r}
#| label: fig-usertype-ride-hist-facet-q13
#| fig-cap: "Histogram ride_length by User Type - Three first quartiles ([0,75])"

trip_for_analysis %>% 
  filter(ride_length <= 1182) %>% 
  mutate(ride_length = as.integer(ride_length/60)) %>% 
ggplot(aes(ride_length, fill = usertype)) +
  geom_histogram(color = "ghostwhite", show.legend = FALSE) +
  labs(
    y = "",
    x = "ride_length(min)"
  ) +
  # scale_x_log10() +
  facet_wrap( ~ usertype, scales = "free_y") +
  theme_minimal()
```

After analysing both graphs, it is clear the different pattern between the user types. The casual ones do longer trips than the other group.

Let's see this performance differentiation between business days (days 2, 3, 4, 5 and 6) and weekend days (days 1 and 7) only for the first three quartiles (\<75%).

```{r}
#| label: fig-usertype-daytype-ride-facet-q13
#| fig-cap: "Histogram ride_length by User Type and Type of Day - Three first quartiles ([0,75])"

trip_for_analysis %>% 
  filter(ride_length <= 1182) %>% 
  mutate(ride_length = as.integer(ride_length/60),
         day_type = as.factor(if_else(between(day_of_week, 2, 6), "Business Day", "Weekend Day"))) %>% 
ggplot(aes(ride_length, fill = usertype)) +
  geom_histogram(color = "ghostwhite", show.legend = FALSE) +
  labs(
    y = "",
    x = "ride_length(min)"
  ) +
  # scale_x_log10() +
  facet_wrap( day_type ~ usertype, scales = "free_y") +
  theme_minimal()
```

Well, from the @fig-usertype-daytype-ride-facet-q13 it showed there is no substantial pattern difference between both groups: Business Day and Weekend Day for each user type.

Let's make one more to check if there is any correlation between the user age and the ride length. It used the `viridis` color package to show bigger contrast.

```{r}
#| label: fig-usertype-ride-scat-all
#| fig-cap: "Scatter ride_length vs Age"

trip_for_analysis %>% 
  # filter(ride_length <= 1182) %>% 
  filter(usertype == "member") %>% 
  mutate(ride_length = as.integer(ride_length/60)) %>% 
ggplot(aes(ride_length, age, color = gender)) +
  geom_point(alpha = .1, size = 1.2) +
  geom_smooth(se = FALSE, method = "lm") +
  labs(
    y = "Age (yr)",
    x = "ride_length(min)"
  ) + 
  scale_color_viridis_d(direction = -1) +
  scale_x_log10() +
  theme_minimal()
```

For the @fig-usertype-ride-scat-all it can be extracted the fact there is no significant correlation between age and ride length and also that it is the same for both gender.

#### Summary

In this, one can get a lot of information from @fig-usertype-dow-month-tile as the casual user basically uses the platform from april to october and on weekends, but the members use it all over the year with intensification in those months but mainly on business days and for the ride length it was captured from @fig-usertype-ride-hist-facet-q13 that members use to make shorter trips (less then 10 min) than the casual ones (over 10 min).

Also, from the descriptive analysis, it can be extracted the members characteristics:

The typical user is:

Male (`r round(mean(trip_for_analysis$gender[trip_for_analysis$usertype == "member"] == "Male", na.rm = TRUE)*100, 1)`%).

Average Age: `r round(mean(trip_for_analysis$age[trip_for_analysis$usertype == "member"]), 1)`.

Ride length:

-   Member Users:

    -   Typically under ``` r round(quantile(trip_for_analysis$ride_length[``trip_for_analysis$usertype == "member"``])[4]/60, 0) ``` minutes (75%).

    -   Average: ``` r round(mean(trip_for_analysis$ride_length``[trip_for_analysis$usertype == "member"]``)/60, 1) ``` minutes

    -   Mode: ``` r round(``quantile(trip_for_analysis$ride_length[trip_for_analysis$usertype == "member"])[3]/60, 0) ``` minutes

-   Casual Users:

    -   Typically under ``` r round(quantile(trip_for_analysis$ride_length[``trip_for_analysis$usertype == "casual"``])[4]/60, 0) ``` minutes (75%).

    -   Average: ``` r round(mean(trip_for_analysis$ride_length``[trip_for_analysis$usertype == "casual"]``)/60, 1) ``` minutes

    -   Mode: ``` r round(``quantile(trip_for_analysis$ride_length[trip_for_analysis$usertype == "casual"])[3]/60, 0) ``` minutes

Conclusion: casual users do longer trips and mostly on weekends. By the other hand member users do shorter trips mainly on business days. *Maybe it is an idea to identify which users within the casual have the same members pattern and make a direct campaign as bellow. At @tbl-casual-similar-member, it is shown a simple model using the members group, but it can be logistic modeled do determine the best ROC curve to use as a next step*.

```{r}
#| label: tbl-casual-similar-member
#| tbl-cap: "Number of casual users within the ride length pattern above the members median."

trip_for_analysis %>% 
  filter(ride_length <= quantile(trip_for_analysis$ride_length[trip_for_analysis$usertype == "member"])[3]) %>% 
  filter(usertype == "casual") %>% 
  mutate(ride_length = as.integer(ride_length/60)) %>% 
  count(usertype) %>% 
  flextable() %>% 
  autofit()

```

The file for further analysis is exported bellow in csv format and it is a very large file to be open in spreadsheets.

```{r saving_trip_for_analysis}
trip_for_analysis %>% write.csv(file = "trip_for_analysis.csv")
```
